input {
	file{
		add_field => {'flag' => 0}
		sincedb_path => "/dev/null"
		path => "/tmp/*.log"
		start_position => "beginning"
	}
}

filter{
	grok{
		patterns_dir => "./patterns"
		break_on_match=>false
		match => {
		"message" =>"%{TIME_LOG:Timestamp} %{WORD}: %{LOGLEVEL:log_level} \(%{LOG_TYPE:log_type}\): \(%{SOURCE:Source_file}::%{POSINT:Line_number:int}\) %{GREEDYDATA:log_message}"
		}
		match => {"path" => "%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"}
	}
	date{
		match => ["Timestamp","MMM dd YYYY HH:mm:ss"]
		target => "@timestamp"
	}
	if "WARNING" == [log_level] or "warning" == [loglevel] or "Warning" == [loglevel]{
		grok{
			match =>{"log_message"=>"%{GREEDYDATA:warning_msg}"}
		}
	}
	else if "heartbeat_received" in [log_message] {
		grok{
			patterns_dir => "./patterns"
			match => {
				"log_message" =>"%{USER}: %{WORD} %{NUMBER:self_heartbeats:int} : %{WORD} %{NUMBER:other_heartbeats:int}"
			}
		}
		simpledelta{
			input_field => "self_heartbeats"
			output_field => "self_htbt_diff"
			common_field => "filename"
		}
		simpledelta{
			input_field => "other_heartbeats"
			output_field => "other_htbt_diff"
			common_field => "filename"
		}
		ruby{
			code => "event['flag'] = 1"
			#event['format'] = 'network.heartbeat'"

		}
	}
	else if "migrates" in [log_message] {
		grok{
			patterns_dir => "./patterns"
			match =>{
				"log_message" => "%{WORD} %{WORD} %{WORD} \( %{NUMBER:outgoing_mig:int} , %{NUMBER:incoming_mig:int} \) ::: %{WORD} %{NUMBER:cluster_size:int} ::: %{WORD} %{NUMBER:data_objects:int}"
			}
		}
		simpledelta{
			input_field => "data_objects"
			output_field => "data_obj_diff"
			common_field => "filename"
		}
		ruby{
			code => "event['flag'] = 2"
			#event['format'] = 'network.migrates'"
		}
	}
	else if "trans_in_progress" in [log_message]{
		grok{
			match => {
				"log_message" => "%{USER}: %{WORD} %{NUMBER:wr:int} %{WORD} %{NUMBER:prox:int} %{WORD} %{NUMBER:wait:int} ::: %{WORD} %{NUMBER:q:int} ::: %{WORD} %{NUMBER:bq:int} ::: %{WORD} %{NUMBER:iq:int} ::: %{WORD} %{NUMBER:dq:int} : %{WORD} - %{WORD} \(%{NUMBER:fds_recent_open:int}, %{NUMBER:fds_ever_opened:int}, %{NUMBER:fds_ever_closed:int}\) : %{WORD} \(%{NUMBER:hb_recent_open:int}, %{NUMBER:hb_ever_opened:int}, %{NUMBER:hb_ever_closed:int}\) : %{WORD} \(%{NUMBER:fab_recent_open:int}, %{NUMBER:fab_ever_opened:int}, %{NUMBER:fab_ever_closed:int}\)"
			}
		}
		ruby{
			code => "event['flag'] = 3"
		}
	}
	else if [log_type]=="nsup"{
		if "Records" in [log_message]{
			grok{
				match =>{
					"log_message" => "\{%{WORD:nsup_namespace}\} %{WORD}: %{NUMBER:nsup_records:int}, %{NUMBER:0-vt:int} %{USER}, %{NUMBER:current_expired:int}\(%{NUMBER:total_expired:int}\) %{WORD}, %{NUMBER:current_evicted:int}\(%{NUMBER:total_evicted:int}\) %{WORD}, %{NUMBER:current_setdeletes:int}\(%{NUMBER:total_setdeletes:int}\) %{WORD} %{WORD}, %{NUMBER:current_setevicted:int}\(%{NUMBER:total_setevicted:int}\) %{WORD} %{WORD}\. %{WORD} %{WORD}: %{NUMBER},%{NUMBER},%{NUMBER}\. %{WORD}: %{NUMBER},%{NUMBER},%{NUMBER}\. %{WORD} %{WORD}: %{NUMBER:total_nsup_time_ms:int} %{WORD}"
				}
			}
		}
		ruby{
			code => "event['flag'] = 4"
		}
	}
	else if "histogram dump" in [log_message]{
		if "count" in [log_message]{
			grok{
				match => {
					"log_message" => "%{WORD} %{WORD}: %{USER:hist_type} \(%{NUMBER:total_query_count:int} %{WORD}\) %{WORD}"
				}
			}
			simpledelta{
				input_field => "total_query_count"
				output_field => "diff_query_count"
				common_field => "filename"
			}
		}
		else if "reads " in [log_message]{
			grok{
				match => {
					"log_message" => "%{WORD} %{WORD}: %{USER:hist_type} \(%{NUMBER:reads_trans:int} %{WORD}\) %{WORD}"
				}
			}
			simpledelta{
				input_field => "reads_trans"
				output_field => "diff_reads_trans"
				common_field => "filename"
			}
		}
		else if "writes_master " in [log_message]{
			grok{
				match => {
					"log_message" => "%{WORD} %{WORD}: %{USER:hist_type} \(%{NUMBER:writes_master_trans:int} %{WORD}\) %{WORD}"
				}
			}
			simpledelta{
				input_field => "writes_master_trans"
				output_field => "diff_writes_master_trans"
				common_field => "filename"
			}
		}
		else if "proxy " in [log_message]{
			grok{
				match => {
					"log_message" => "%{WORD} %{WORD}: %{USER:hist_type} \(%{NUMBER:proxy_trans:int} %{WORD}\) %{WORD}"
				}
			}
			simpledelta{
				input_field => "proxy_trans"
				output_field => "diff_proxy_trans"
				common_field => "filename"
			}
		}
		else if "udf " in [log_message]{
			grok{
				match => {
					"log_message" => "%{WORD} %{WORD}: %{USER:hist_type} \(%{NUMBER:udf_trans:int} %{WORD}\) %{WORD}"
				}
			}
			simpledelta{
				input_field => "udf_trans"
				output_field => "diff_udf_trans"
				common_field => "filename"
			}
		}
		else if "query " in [log_message]{
			grok{
				match => {
					"log_message" => "%{WORD} %{WORD}: %{USER:hist_type} \(%{NUMBER:query_trans:int} %{WORD}\) %{WORD}"
				}
			}
			simpledelta{
				input_field => "query_trans"
				output_field => "diff_query_trans"
				common_field => "filename"
			}
		}
		else{
			grok{
				match => {
					"log_message" => "%{WORD} %{WORD}: %{USER:hist_type} \(%{NUMBER:other_trans:int} %{WORD}\) %{WORD}"
				}
			}
		}
		ruby{
			code => "event['flag'] = 5"
		}
	}
	else if [log_type]=="drv_ssd" and "device" in [log_message]{
		grok{
			match => {
				"log_message" => "%{WORD} \/%{WORD}\/%{WORD}: %{WORD} %{NUMBER:used_space:int}, %{USER} %{NUMBER:contig_space:int}M \(%{NUMBER:wblocks:int} %{WORD}\), %{USER} %{NUMBER:swb-free:int}, %{USER} %{NUMBER:n-w:int}, %{USER} %{NUMBER:w-q:int} %{USER} %{NUMBER:w-tot:int} \(%{NUMBER}\/%{WORD}\), %{USER} %{NUMBER:defrag-q:int} %{USER} %{NUMBER:defrag-tot:int} \(%{NUMBER}\/%{WORD}\)"
			}
		}
		ruby{
			code => "event['flag'] = 6"
		}
	}
	else if "namespace" in [log_message]{
		if "cache-read" in [log_message]{
			grok{
				match =>{
					"log_message" => "%{WORD} %{WORD:mem_namespace}: %{WORD} %{WORD}: %{NUMBER:disk_inuse:int} %{WORD} %{WORD}: %{NUMBER:memory_inuse_bytes:int} \(%{WORD}\) %{WORD} %{WORD} %{WORD}: %{NUMBER:sindex_memory_inuse:int} \(%{WORD}\) %{WORD} %{WORD} %{NUMBER:avail_pct:int} %{USER} %{WORD} %{NUMBER:cache-read_pct:int}"
				}
			}
		}
		else{
			grok{
				match =>{
					"log_message" => "%{WORD} %{WORD:mem_namespace}: %{WORD} %{WORD}: %{NUMBER:disk_inuse:int} %{WORD} %{WORD}: %{NUMBER:memory_inuse_bytes:int} \(%{WORD}\) %{WORD} %{WORD} %{WORD}: %{NUMBER:sindex_memory_inuse:int} \(%{WORD}\) %{WORD} %{WORD} %{NUMBER:avail_pct:int}"
				}
			}
		}
		ruby{
			code => "event['flag'] = 7"
		}
	}
	mutate{remove_field => ["message","log_message"]}
}

output {
  	
	elasticsearch {
		host=>localhost
		protocol => "http"
		index => "logstash-%{filename}"
	}
	#stdout{ codec => rubydebug}
}
